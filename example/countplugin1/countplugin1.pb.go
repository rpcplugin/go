// Code generated by protoc-gen-go. DO NOT EDIT.
// source: countplugin1.proto

package countplugin1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Count struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Count) Reset()         { *m = Count{} }
func (m *Count) String() string { return proto.CompactTextString(m) }
func (*Count) ProtoMessage()    {}
func (*Count) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c5ce4f0f47ad7bb, []int{0}
}

func (m *Count) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Count.Unmarshal(m, b)
}
func (m *Count) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Count.Marshal(b, m, deterministic)
}
func (m *Count) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Count.Merge(m, src)
}
func (m *Count) XXX_Size() int {
	return xxx_messageInfo_Count.Size(m)
}
func (m *Count) XXX_DiscardUnknown() {
	xxx_messageInfo_Count.DiscardUnknown(m)
}

var xxx_messageInfo_Count proto.InternalMessageInfo

type Count_Request struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Count_Request) Reset()         { *m = Count_Request{} }
func (m *Count_Request) String() string { return proto.CompactTextString(m) }
func (*Count_Request) ProtoMessage()    {}
func (*Count_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c5ce4f0f47ad7bb, []int{0, 0}
}

func (m *Count_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Count_Request.Unmarshal(m, b)
}
func (m *Count_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Count_Request.Marshal(b, m, deterministic)
}
func (m *Count_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Count_Request.Merge(m, src)
}
func (m *Count_Request) XXX_Size() int {
	return xxx_messageInfo_Count_Request.Size(m)
}
func (m *Count_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Count_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Count_Request proto.InternalMessageInfo

type Count_Response struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Count_Response) Reset()         { *m = Count_Response{} }
func (m *Count_Response) String() string { return proto.CompactTextString(m) }
func (*Count_Response) ProtoMessage()    {}
func (*Count_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c5ce4f0f47ad7bb, []int{0, 1}
}

func (m *Count_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Count_Response.Unmarshal(m, b)
}
func (m *Count_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Count_Response.Marshal(b, m, deterministic)
}
func (m *Count_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Count_Response.Merge(m, src)
}
func (m *Count_Response) XXX_Size() int {
	return xxx_messageInfo_Count_Response.Size(m)
}
func (m *Count_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Count_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Count_Response proto.InternalMessageInfo

type GetCount struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCount) Reset()         { *m = GetCount{} }
func (m *GetCount) String() string { return proto.CompactTextString(m) }
func (*GetCount) ProtoMessage()    {}
func (*GetCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c5ce4f0f47ad7bb, []int{1}
}

func (m *GetCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCount.Unmarshal(m, b)
}
func (m *GetCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCount.Marshal(b, m, deterministic)
}
func (m *GetCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCount.Merge(m, src)
}
func (m *GetCount) XXX_Size() int {
	return xxx_messageInfo_GetCount.Size(m)
}
func (m *GetCount) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCount.DiscardUnknown(m)
}

var xxx_messageInfo_GetCount proto.InternalMessageInfo

type GetCount_Request struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCount_Request) Reset()         { *m = GetCount_Request{} }
func (m *GetCount_Request) String() string { return proto.CompactTextString(m) }
func (*GetCount_Request) ProtoMessage()    {}
func (*GetCount_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c5ce4f0f47ad7bb, []int{1, 0}
}

func (m *GetCount_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCount_Request.Unmarshal(m, b)
}
func (m *GetCount_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCount_Request.Marshal(b, m, deterministic)
}
func (m *GetCount_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCount_Request.Merge(m, src)
}
func (m *GetCount_Request) XXX_Size() int {
	return xxx_messageInfo_GetCount_Request.Size(m)
}
func (m *GetCount_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCount_Request.DiscardUnknown(m)
}

var xxx_messageInfo_GetCount_Request proto.InternalMessageInfo

type GetCount_Response struct {
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCount_Response) Reset()         { *m = GetCount_Response{} }
func (m *GetCount_Response) String() string { return proto.CompactTextString(m) }
func (*GetCount_Response) ProtoMessage()    {}
func (*GetCount_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c5ce4f0f47ad7bb, []int{1, 1}
}

func (m *GetCount_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCount_Response.Unmarshal(m, b)
}
func (m *GetCount_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCount_Response.Marshal(b, m, deterministic)
}
func (m *GetCount_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCount_Response.Merge(m, src)
}
func (m *GetCount_Response) XXX_Size() int {
	return xxx_messageInfo_GetCount_Response.Size(m)
}
func (m *GetCount_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCount_Response.DiscardUnknown(m)
}

var xxx_messageInfo_GetCount_Response proto.InternalMessageInfo

func (m *GetCount_Response) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*Count)(nil), "countplugin1.Count")
	proto.RegisterType((*Count_Request)(nil), "countplugin1.Count.Request")
	proto.RegisterType((*Count_Response)(nil), "countplugin1.Count.Response")
	proto.RegisterType((*GetCount)(nil), "countplugin1.GetCount")
	proto.RegisterType((*GetCount_Request)(nil), "countplugin1.GetCount.Request")
	proto.RegisterType((*GetCount_Response)(nil), "countplugin1.GetCount.Response")
}

func init() { proto.RegisterFile("countplugin1.proto", fileDescriptor_5c5ce4f0f47ad7bb) }

var fileDescriptor_5c5ce4f0f47ad7bb = []byte{
	// 156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0xce, 0x2f, 0xcd,
	0x2b, 0x29, 0xc8, 0x29, 0x4d, 0xcf, 0xcc, 0x33, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x41, 0x16, 0x53, 0x92, 0xe3, 0x62, 0x75, 0x06, 0xf1, 0xa5, 0x38, 0xb9, 0xd8, 0x83, 0x52, 0x0b,
	0x4b, 0x53, 0x8b, 0x4b, 0xa4, 0xb8, 0xb8, 0x38, 0x82, 0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53,
	0x95, 0xcc, 0xb9, 0x38, 0xdc, 0x53, 0x4b, 0x30, 0x94, 0x28, 0x20, 0x94, 0x08, 0x89, 0x70, 0xb1,
	0x82, 0x8d, 0x94, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0e, 0x82, 0x70, 0x8c, 0x66, 0x31, 0x72, 0xb1,
	0x83, 0xb5, 0xa5, 0x16, 0x09, 0x39, 0x41, 0x2d, 0x11, 0x92, 0xd6, 0x43, 0x71, 0x10, 0x58, 0x50,
	0x0f, 0x66, 0xa6, 0x0c, 0x76, 0x49, 0xa8, 0x2d, 0xde, 0x08, 0x87, 0x08, 0xc9, 0xa1, 0xaa, 0x84,
	0x89, 0xc3, 0x4d, 0x92, 0xc7, 0x29, 0x0f, 0x31, 0x2c, 0x89, 0x0d, 0x1c, 0x14, 0xc6, 0x80, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x2f, 0x12, 0xca, 0xf2, 0x20, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CounterClient is the client API for Counter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CounterClient interface {
	Count(ctx context.Context, in *Count_Request, opts ...grpc.CallOption) (*Count_Response, error)
	GetCount(ctx context.Context, in *GetCount_Request, opts ...grpc.CallOption) (*GetCount_Response, error)
}

type counterClient struct {
	cc *grpc.ClientConn
}

func NewCounterClient(cc *grpc.ClientConn) CounterClient {
	return &counterClient{cc}
}

func (c *counterClient) Count(ctx context.Context, in *Count_Request, opts ...grpc.CallOption) (*Count_Response, error) {
	out := new(Count_Response)
	err := c.cc.Invoke(ctx, "/countplugin1.Counter/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterClient) GetCount(ctx context.Context, in *GetCount_Request, opts ...grpc.CallOption) (*GetCount_Response, error) {
	out := new(GetCount_Response)
	err := c.cc.Invoke(ctx, "/countplugin1.Counter/GetCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CounterServer is the server API for Counter service.
type CounterServer interface {
	Count(context.Context, *Count_Request) (*Count_Response, error)
	GetCount(context.Context, *GetCount_Request) (*GetCount_Response, error)
}

// UnimplementedCounterServer can be embedded to have forward compatible implementations.
type UnimplementedCounterServer struct {
}

func (*UnimplementedCounterServer) Count(ctx context.Context, req *Count_Request) (*Count_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (*UnimplementedCounterServer) GetCount(ctx context.Context, req *GetCount_Request) (*GetCount_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCount not implemented")
}

func RegisterCounterServer(s *grpc.Server, srv CounterServer) {
	s.RegisterService(&_Counter_serviceDesc, srv)
}

func _Counter_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Count_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/countplugin1.Counter/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).Count(ctx, req.(*Count_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counter_GetCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCount_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).GetCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/countplugin1.Counter/GetCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).GetCount(ctx, req.(*GetCount_Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Counter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "countplugin1.Counter",
	HandlerType: (*CounterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _Counter_Count_Handler,
		},
		{
			MethodName: "GetCount",
			Handler:    _Counter_GetCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "countplugin1.proto",
}
